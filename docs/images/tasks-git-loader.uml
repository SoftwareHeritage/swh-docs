@startuml
  participant SCH_DB as "scheduler visits API" #B0C4DE
  participant SCH_RUN as "scheduler schedule-recurrent"
  participant SCH_JC as "scheduler journal-client"
  participant RMQ as "Celery queues"
  participant JOURNAL as "Kafka journal"
  participant STORAGE_DB as "storage DB"
  participant STORAGE_API as "storage API"
  participant OBJSTORE as "object storage"
  participant WORK_GIT as "worker@loader-git"
  participant GIT as "git server"

  Note over SCH_DB,SCH_RUN: Listed-Origin O1 created beforehand \n by the lister-gitlab task
  loop Polling
	  activate SCH_RUN
      SCH_RUN->>SCH_DB: GET origins/grab_next visit-type=git
      SCH_DB-->>SCH_RUN: ORIGIN url=O1
      SCH_RUN->>RMQ: CREATE Celery Task CT2 loader-git url=O1
	  deactivate SCH_RUN
	  activate RMQ
  end

  RMQ->>WORK_GIT: Start task CT2
  deactivate RMQ
  activate WORK_GIT

  WORK_GIT->>STORAGE_API: ADD origin-visit url=O1
  activate STORAGE_API
  STORAGE_API->>STORAGE_DB: INSERT Origin
  STORAGE_API->>JOURNAL: publish message in 'origin' topic
  STORAGE_API->>STORAGE_DB: INSERT OriginVisit url=O1
  STORAGE_API->>JOURNAL: publish message in 'origin-visit' topic
  STORAGE_DB-->>STORAGE_API: OriginVisit id=V1
  STORAGE_API->>JOURNAL: publish message in 'origin-visit-status' topic
  STORAGE_API->>STORAGE_DB: INSERT OriginVisitStatus url=O1 visit=V1 status=created date=now
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: GET origin state
  activate STORAGE_API
  STORAGE_API-->>WORK_GIT: 200
  deactivate STORAGE_API

  WORK_GIT->>GIT: GET refs
  activate GIT
  GIT->>WORK_GIT: 200 / refs
  deactivate GIT

  WORK_GIT->>GIT: GET new_objects
  activate GIT
  GIT->>WORK_GIT: 200 / objects
  deactivate GIT

  WORK_GIT->>GIT: PACKFILE
  activate GIT
  GIT->>WORK_GIT: 200 / blobs
  deactivate GIT

  WORK_GIT->>STORAGE_API: LOAD NEW CONTENT
  activate STORAGE_API
  loop For each blob
      STORAGE_API->>STORAGE_DB: ADD CONTENT
      STORAGE_API->>OBJSTORE: ADD BLOB
      STORAGE_API->>JOURNAL: publish message in 'content' topic
  end
  STORAGE_API-->>WORK_GIT: 200 / blobs
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: NEW DIREcTORY
  activate STORAGE_API
  loop For each DIRECTORY
    STORAGE_API->>STORAGE_DB: INSERT DIRECTORY
    STORAGE_API->>JOURNAL: publish message in 'directory' topic
  end
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: NEW REVISION
  activate STORAGE_API
  loop For each REVISION
    STORAGE_API->>STORAGE_DB: INSERT REVISION
	STORAGE_API->>JOURNAL: publish message in 'revision' topic
  end
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: NEW RELEASE
  activate STORAGE_API
  loop For each RELEASE
    STORAGE_API->>STORAGE_DB: INSERT RELSEASE
	STORAGE_API->>JOURNAL: publish message in 'release' topic
  end
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: NEW SNAPSHOT
  activate STORAGE_API
  loop For each SNAPSHOT
    STORAGE_API->>STORAGE_DB: INSERT SNAPSHOT
	STORAGE_API->>JOURNAL: publish message in 'snapshot' topic
  end
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API

  WORK_GIT->>STORAGE_API: ADD origin-visit-status url=O1 visit=V1 snapshot=S1 status=full
  activate STORAGE_API
  STORAGE_API->>STORAGE_DB: INSERT OriginVisitStatus url=O1 visit=V1 status=full date=now
  activate JOURNAL
  STORAGE_API->>JOURNAL: publish message in 'origin-visit-status' topic
  STORAGE_API-->>WORK_GIT: 201
  deactivate STORAGE_API
  deactivate WORK_GIT

  activate SCH_JC
  JOURNAL->>SCH_JC: consume message from 'origin-visit-status' topic
  deactivate JOURNAL
  SCH_JC->>SCH_DB: UPDATE VISIT url=O1
  deactivate SCH_JC
@enduml
